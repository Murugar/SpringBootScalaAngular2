// Generated by CoffeeScript 1.4.0
(function() {
  var Stomp, StompServerMock;

  Stomp = require('../../lib/stomp.js').Stomp;

  StompServerMock = require('./server.mock.js').StompServerMock;

  Stomp.WebSocketClass = StompServerMock;

  describe("Stomp", function() {
    it("lets you connect to a server with a websocket and get a callback", function() {
      var client, connected, ws;
      ws = new StompServerMock("ws://mocked/stomp/server");
      client = Stomp.over(ws);
      connected = false;
      client.connect("guest", "guest", function() {
        return connected = true;
      });
      waitsFor(function() {
        return connected;
      });
      return runs(function() {
        return expect(client.connected).toBe(true);
      });
    });
    it("lets you connect to a server and get a callback", function() {
      var client, connected;
      client = Stomp.client("ws://mocked/stomp/server");
      connected = false;
      client.connect("guest", "guest", function() {
        return connected = true;
      });
      waitsFor(function() {
        return connected;
      });
      return runs(function() {
        return expect(client.connected).toBe(true);
      });
    });
    it("lets you subscribe to a destination", function() {
      var client, subscription;
      client = Stomp.client("ws://mocked/stomp/server");
      subscription = null;
      client.connect("guest", "guest", function() {
        return subscription = client.subscribe("/queue/test");
      });
      waitsFor(function() {
        return subscription;
      });
      return runs(function() {
        return expect(Object.keys(client.ws.subscriptions)).toContain(subscription.id);
      });
    });
    it("lets you publish a message to a destination", function() {
      var client, message;
      client = Stomp.client("ws://mocked/stomp/server");
      message = null;
      client.connect("guest", "guest", function() {
        message = "Hello world!";
        return client.send("/queue/test", {}, message);
      });
      waitsFor(function() {
        return message;
      });
      return runs(function() {
        return expect(client.ws.messages.pop().toString()).toContain(message);
      });
    });
    it("lets you unsubscribe from a destination", function() {
      var client, subscription, unsubscribed;
      client = Stomp.client("ws://mocked/stomp/server");
      unsubscribed = false;
      subscription = null;
      client.connect("guest", "guest", function() {
        subscription = client.subscribe("/queue/test");
        subscription.unsubscribe();
        return unsubscribed = true;
      });
      waitsFor(function() {
        return unsubscribed;
      });
      return runs(function() {
        return expect(Object.keys(client.ws.subscriptions)).not.toContain(subscription.id);
      });
    });
    it("lets you receive messages only while subscribed", function() {
      var client, messages, subscription;
      client = Stomp.client("ws://mocked/stomp/server");
      subscription = null;
      messages = [];
      client.connect("guest", "guest", function() {
        return subscription = client.subscribe("/queue/test", function(msg) {
          return messages.push(msg);
        });
      });
      waitsFor(function() {
        return subscription;
      });
      return runs(function() {
        client.ws.test_send(subscription.id, Math.random());
        client.ws.test_send(subscription.id, Math.random());
        expect(messages.length).toEqual(2);
        subscription.unsubscribe();
        try {
          client.ws.test_send(id, Math.random());
        } catch (err) {
          null;
        }
        return expect(messages.length).toEqual(2);
      });
    });
    it("lets you send messages in a transaction", function() {
      var client, connected;
      client = Stomp.client("ws://mocked/stomp/server");
      connected = false;
      client.connect("guest", "guest", function() {
        return connected = true;
      });
      waitsFor(function() {
        return connected;
      });
      return runs(function() {
        var txid;
        txid = "123";
        client.begin(txid);
        client.send("/queue/test", {
          transaction: txid
        }, "messages 1");
        client.send("/queue/test", {
          transaction: txid
        }, "messages 2");
        expect(client.ws.messages.length).toEqual(0);
        client.send("/queue/test", {
          transaction: txid
        }, "messages 3");
        client.commit(txid);
        return expect(client.ws.messages.length).toEqual(3);
      });
    });
    return it("lets you abort a transaction", function() {
      var client, connected;
      client = Stomp.client("ws://mocked/stomp/server");
      connected = false;
      client.connect("guest", "guest", function() {
        return connected = true;
      });
      waitsFor(function() {
        return connected;
      });
      return runs(function() {
        var txid;
        txid = "123";
        client.begin(txid);
        client.send("/queue/test", {
          transaction: txid
        }, "messages 1");
        client.send("/queue/test", {
          transaction: txid
        }, "messages 2");
        expect(client.ws.messages.length).toEqual(0);
        client.send("/queue/test", {
          transaction: txid
        }, "messages 3");
        client.abort(txid);
        return expect(client.ws.messages.length).toEqual(0);
      });
    });
  });

}).call(this);
